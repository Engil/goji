(****************************************************************************)
(* GOJI (JavaScript Interface Generator for OCaml)                          *)
(* This file is published under the CeCILL licence                          *)
(* (C) 2013 Benjamin Canou                                                  *)
(****************************************************************************)

open Goji_ast
open Goji_pprint
open Goji_registry
open Goji_emit_adt

let format_header { doc ; name ; version ; license ; author } =
  `Com [
    `Par (split_words doc) ;
    `Par
      (split_words "This Binding for the JavaScript library"
       @ [ `Word name ]
       @ (match version with Some v -> [ `Word "version" ; `Word v ] | None -> [])
       @ (match author with Some v -> [ `Word "by" ; `Word v ] | None -> [])
       @ split_words "has been automatically generated by the Goji binding generator."
       @ split_words "It should not be edited by hand.") ;
    (match license with
     | None -> `Par (split_words "IT DOES NOT BEAR ANY LICENSING INFORMATION !")
     | Some l ->
       `Par (split_words "It is licensed under the"
             @ [ `Word l.Goji_license.long_name ]
	     @ split_words "(respecting the original library license)."
             @ split_words "See the LICENSE file for more details.")) ]

let format_doc_before doc items =
  match doc with
  | Nodoc -> items
  | Doc text -> `Com [ `Par (split_words text) ] :: items

let rec format_implementation component =
    let header = format_header component in
    let elements = format_elements component.elements in
    header :: `Nl :: elements

and format_interface component =
    let header = format_header component in
    let elements = format_interface_elements component.elements in
    header :: `Nl :: elements

and format_elements elements =
    List.flatten (List.map (format_element) elements)

and format_interface_elements elements =
    List.flatten (List.map (format_interface_element) elements)

and format_element = function
  | Structure (name, doc, elements) ->
    let contents = format_elements elements in
    format_doc_before doc [ `Mod (name, contents) ]
  | Section (text, elements) ->
    `Com [ `Section (2, split_words text) ]
    :: format_elements elements
  | Doc_block (Doc text) ->
    [ `Com [ `Par (split_words text) ] ]
  | Doc_block Nodoc ->
    []
  | Group elements ->
    format_elements elements
  | Type (tparams, name, doc, type_mapping) ->
    format_type_definition tparams name doc type_mapping
  | Method (abbrv, name, params, body, ret, doc) ->
    format_method_definition abbrv name params body ret doc
  | Function (name, params, body, ret, doc) ->
    format_function_definition name params body ret doc
  | Let (name, body, ret, doc) ->
    format_value_definition name body ret doc
  | Exception (name, doc) ->
    format_doc_before doc [ `Exc (name, []) ]
  | Inherits (n, t1, t2, doc) ->
    format_inherits_definition n t1 t2 doc

and format_interface_element = function
  | Structure (name, doc, elements) ->
    let contents = format_interface_elements elements in
    format_doc_before doc [ `Sig (name, contents) ]
  | Section (text, elements) ->
    `Com [ `Section (2, split_words text) ]
    :: format_interface_elements elements
  | Doc_block (Doc text) ->
    [ `Com [ `Par (split_words text) ] ]
  | Doc_block Nodoc ->
    []
  | Group elements ->
    format_interface_elements elements
  | Type (tparams, name, doc, type_mapping) ->
    format_type_interface tparams name doc type_mapping
  | Method (abbrv, name, params, body, ret, doc) ->
    format_method_interface abbrv name params ret doc
  | Function (name, params, body, ret, doc) ->
    format_function_interface name params ret doc
  | Let (name, body, ret, doc) ->
    format_value_interface name ret doc
  | Exception (name, doc) ->
    format_doc_before doc [ `Exc (name, []) ]
  | Inherits (n, t1, t2, doc) ->
    format_inherits_interface n t1 t2 doc

let emit_implementation fp component =
  let document = format_impl (format_implementation component) in
  PPrint.ToChannel.pretty 0.9 80 fp document

let emit_interface fp component =
  let document = format_intf (format_interface component) in
  PPrint.ToChannel.pretty 0.9 80 fp document
